{"version":3,"sources":["constant.ts","component/layout/styles.tsx","component/header/styles.tsx","component/header/index.tsx","component/navbar/styles.tsx","component/navbar/index.tsx","component/layout/index.tsx","App.tsx","serviceWorker.ts","component/global-style/index.tsx","index.tsx"],"names":["THEME","Layout","styled","div","LayoutContainer","Header","HeaderContainer","Logo","img","src","process","NavBar","NavBarContainer","children","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2LAEaA,EACI,UADJA,EAEK,QCDLC,EAASC,IAAOC,IAAV,oEAAGD,CAAH,MAENE,EAAkBF,IAAOC,IAAV,6EAAGD,CAAH,qFDLF,K,OEIbG,EAASH,IAAOC,IAAV,qEAAGD,CAAH,qBAINI,EAAkBJ,IAAOC,IAAV,8EAAGD,CAAH,0KAKNF,EFbI,IEgBFA,GAIXO,EAAOL,IAAOM,IAAV,mEAAGN,CAAH,6FFpBS,KGgBXG,EAVuB,SAAC,GACrC,OAD6C,eAE3C,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQI,IAAKC,0BCNRC,EAAST,IAAOC,IAAV,qEAAGD,CAAH,qBAINU,EAAkBV,IAAOC,IAAV,8EAAGD,CAAH,+IJRF,KKcXS,EARuB,SAAC,GACrC,OAD6C,eAE3C,kBAAC,EAAD,KACE,kBAAC,EAAD,iBCWSV,EAVuB,SAAC,GAAkB,IAAhBY,EAAe,EAAfA,SACvC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KAAoBA,KCRXC,MAJf,WACE,OAAO,kBAAC,EAAD,iBCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oXChBN,IAoBeC,EApBKC,YAAH,KCKjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SF+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5322cb19.chunk.js","sourcesContent":["export const BREAKPOINT = 768;\r\n\r\nexport const THEME = {\r\n  MOBILE_HEADER: \"#FF6B00\",\r\n  DESKTOP_HEADER: \"white\",\r\n};\r\n","import styled from \"styled-components/macro\";\r\nimport { BREAKPOINT } from \"../../constant\";\r\n\r\nexport const Layout = styled.div``;\r\n\r\nexport const LayoutContainer = styled.div`\r\n  padding-top: 16.5rem;\r\n\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    padding-top: 22rem;\r\n  }\r\n`;\r\n","import styled from \"styled-components/macro\";\r\n\r\nimport { BREAKPOINT, THEME } from \"../../constant\";\r\n\r\nexport const Header = styled.div`\r\n  position: fixed;\r\n`;\r\n\r\nexport const HeaderContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background-color: ${THEME.MOBILE_HEADER};\r\n\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    background-color: ${THEME.DESKTOP_HEADER};\r\n  }\r\n`;\r\n\r\nexport const Logo = styled.img`\r\n  width: 5rem;\r\n  height: auto;\r\n\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    width: 6rem;\r\n    height: auto;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface HeaderProps {}\r\n\r\nconst Header: React.FC<HeaderProps> = ({}) => {\r\n  return (\r\n    <S.Header>\r\n      <S.HeaderContainer>\r\n        <S.Logo src={process.env.PUBLIC_URL + \"/logo.png\"} />\r\n      </S.HeaderContainer>\r\n    </S.Header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components/macro\";\r\n\r\nimport { BREAKPOINT } from \"../../constant\";\r\n\r\nexport const NavBar = styled.div`\r\n  position: fixed;\r\n`;\r\n\r\nexport const NavBarContainer = styled.div`\r\n  width: 100%;\r\n  height: 10.5rem;\r\n  margin-top: 5rem;\r\n  background-color: \"green\";\r\n\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    height: 16rem;\r\n    margin-top: 6rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport * as S from \"./styles\";\r\n\r\ninterface NavBarProps {}\r\n\r\nconst NavBar: React.FC<NavBarProps> = ({}) => {\r\n  return (\r\n    <S.NavBar>\r\n      <S.NavBarContainer>NavBar</S.NavBarContainer>\r\n    </S.NavBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import * as S from \"./styles\";\r\n\r\nimport React from \"react\";\r\nimport Header from \"../header\";\r\nimport NavBar from \"../navbar\";\r\n\r\ninterface LayoutProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <S.Layout>\r\n      <Header />\r\n      <NavBar />\r\n      <S.LayoutContainer>{children}</S.LayoutContainer>\r\n    </S.Layout>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport Layout from \"./component/layout\";\r\n\r\nfunction App() {\r\n  return <Layout>Content</Layout>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-display:'block';\r\n    box-sizing : border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n  html {\r\n    font-size : 10px;\r\n  }\r\n  \r\n  body {\r\n    margin: 0;\r\n    user-select : none;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport GlobalStyle from \"./component/global-style\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}